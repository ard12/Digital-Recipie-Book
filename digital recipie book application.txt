import React from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, doc, addDoc, getDocs, deleteDoc, onSnapshot, setLogLevel } from 'firebase/firestore';

// --- Firebase Configuration ---
// This configuration is provided by the environment.
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
    apiKey: "your-api-key",
    authDomain: "your-auth-domain",
    projectId: "your-project-id",
    storageBucket: "your-storage-bucket",
    messagingSenderId: "your-messaging-sender-id",
    appId: "your-app-id"
};

// --- App ID ---
// This ID is provided by the environment.
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-recipe-book';

// --- Component: Icon ---
// A simple component for rendering SVG icons.
const Icon = ({ path, className = "w-6 h-6" }) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={className}>
        <path d={path} />
    </svg>
);

// --- Main App Component ---
export default function App() {
    // --- State Management ---
    const [db, setDb] = React.useState(null);
    const [auth, setAuth] = React.useState(null);
    const [userId, setUserId] = React.useState(null);
    const [isAuthReady, setIsAuthReady] = React.useState(false);

    const [recipes, setRecipes] = React.useState([]);
    const [selectedRecipe, setSelectedRecipe] = React.useState(null);
    const [isAddModalOpen, setIsAddModalOpen] = React.useState(false);
    const [isLoading, setIsLoading] = React.useState(true);
    const [error, setError] = React.useState(null);
    const [showConfirmModal, setShowConfirmModal] = React.useState(false);
    const [recipeToDelete, setRecipeToDelete] = React.useState(null);


    // --- Firebase Initialization and Authentication ---
    React.useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const authInstance = getAuth(app);
            setDb(firestore);
            setAuth(authInstance);
            setLogLevel('debug'); // Enable debug logging for Firestore

            const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
                if (user) {
                    setUserId(user.uid);
                } else {
                    try {
                        const userCredential = await signInAnonymously(authInstance);
                        setUserId(userCredential.user.uid);
                    } catch (e) {
                        console.error("Anonymous sign-in failed:", e);
                        setError("Authentication failed. Please try again later.");
                    }
                }
                setIsAuthReady(true);
            });
            return () => unsubscribe();
        } catch (e) {
            console.error("Firebase initialization error:", e);
            setError("Could not connect to the recipe database.");
            setIsLoading(false);
        }
    }, []);

    // --- Firestore Data Fetching ---
    React.useEffect(() => {
        let unsubscribe = () => {};
        if (isAuthReady && db && userId) {
            setIsLoading(true);
            const recipesCollectionPath = `artifacts/${appId}/users/${userId}/recipes`;
            const recipesCollection = collection(db, recipesCollectionPath);
            
            unsubscribe = onSnapshot(recipesCollection, (snapshot) => {
                const recipesData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                setRecipes(recipesData);
                setIsLoading(false);
            }, (err) => {
                console.error("Error fetching recipes:", err);
                setError("Failed to load recipes. Please check your connection.");
                setIsLoading(false);
            });
        }
        return () => unsubscribe();
    }, [isAuthReady, db, userId]);

    // --- Event Handlers ---
    const handleAddRecipe = async (recipe) => {
        if (!db || !userId) return;
        try {
            const recipesCollectionPath = `artifacts/${appId}/users/${userId}/recipes`;
            await addDoc(collection(db, recipesCollectionPath), recipe);
            setIsAddModalOpen(false);
        } catch (e) {
            console.error("Error adding recipe:", e);
            setError("Could not save the recipe. Please try again.");
        }
    };

    const confirmDelete = (id) => {
        setRecipeToDelete(id);
        setShowConfirmModal(true);
    };

    const handleDeleteRecipe = async () => {
        if (!db || !userId || !recipeToDelete) return;
        try {
            const recipeDocPath = `artifacts/${appId}/users/${userId}/recipes/${recipeToDelete}`;
            await deleteDoc(doc(db, recipeDocPath));
            setSelectedRecipe(null);
            setShowConfirmModal(false);
            setRecipeToDelete(null);
        } catch (e) {
            console.error("Error deleting recipe:", e);
            setError("Could not delete the recipe. Please try again.");
            setShowConfirmModal(false);
        }
    };

    // --- Render Logic ---
    return (
        <div className="min-h-screen bg-gray-50 font-sans text-gray-800">
            <Header onAdd={() => setIsAddModalOpen(true)} />
            <main className="container mx-auto p-4 md:p-8">
                {isLoading && <LoadingSpinner />}
                {error && <ErrorMessage message={error} />}
                {!isLoading && !error && recipes.length === 0 && <EmptyState onAdd={() => setIsAddModalOpen(true)} />}
                
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {recipes.map(recipe => (
                        <RecipeCard key={recipe.id} recipe={recipe} onSelect={() => setSelectedRecipe(recipe)} />
                    ))}
                </div>
            </main>

            {isAddModalOpen && (
                <AddRecipeModal
                    onClose={() => setIsAddModalOpen(false)}
                    onAdd={handleAddRecipe}
                />
            )}

            {selectedRecipe && (
                <RecipeDetailModal
                    recipe={selectedRecipe}
                    onClose={() => setSelectedRecipe(null)}
                    onDelete={confirmDelete}
                />
            )}

            {showConfirmModal && (
                <ConfirmModal
                    title="Delete Recipe"
                    message="Are you sure you want to delete this recipe? This action cannot be undone."
                    onConfirm={handleDeleteRecipe}
                    onCancel={() => setShowConfirmModal(false)}
                />
            )}
        </div>
    );
}


// --- Component: Header ---
const Header = ({ onAdd }) => (
    <header className="bg-white shadow-md">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
            <div className="flex items-center space-x-2">
                <Icon path="M3.375 19.5h17.25c.621 0 1.125-.504 1.125-1.125V9.75c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v8.625c0 .621.504 1.125 1.125 1.125Z" className="w-8 h-8 text-rose-500" />
                <h1 className="text-2xl font-bold text-gray-800 tracking-tight">My Recipe Book</h1>
            </div>
            <button
                onClick={onAdd}
                className="flex items-center space-x-2 bg-rose-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-rose-600 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-rose-500 focus:ring-opacity-50"
            >
                <Icon path="M12 4.5v15m7.5-7.5h-15" className="w-5 h-5" />
                <span>Add Recipe</span>
            </button>
        </div>
    </header>
);

// --- Component: RecipeCard ---
const RecipeCard = ({ recipe, onSelect }) => (
    <div
        onClick={onSelect}
        className="bg-white rounded-xl shadow-lg overflow-hidden cursor-pointer transform hover:-translate-y-1 transition-transform duration-300 group"
    >
        <div className="h-40 bg-gray-200 flex items-center justify-center overflow-hidden">
             <img src={recipe.imageUrl || `https://placehold.co/400x300/f87171/ffffff?text=${recipe.title.split(' ').map(w=>w[0]).join('')}`} 
                  alt={recipe.title} 
                  className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                  onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/400x300/fecaca/dc2626?text=Image+Error`; }}
             />
        </div>
        <div className="p-4">
            <h3 className="text-lg font-semibold text-gray-800 truncate">{recipe.title}</h3>
            <p className="text-sm text-gray-500 mt-1">{recipe.prepTime} minutes</p>
        </div>
    </div>
);

// --- Component: AddRecipeModal ---
const AddRecipeModal = ({ onClose, onAdd }) => {
    const [title, setTitle] = React.useState('');
    const [prepTime, setPrepTime] = React.useState('');
    const [ingredients, setIngredients] = React.useState('');
    const [instructions, setInstructions] = React.useState('');
    const [imageUrl, setImageUrl] = React.useState('');
    const [formError, setFormError] = React.useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!title || !prepTime || !ingredients || !instructions) {
            setFormError("Please fill in all required fields.");
            return;
        }
        setFormError('');
        onAdd({ title, prepTime: parseInt(prepTime), ingredients: ingredients.split('\n').filter(i => i.trim() !== ''), instructions: instructions.split('\n').filter(i => i.trim() !== ''), imageUrl });
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-2xl w-full max-w-lg max-h-full overflow-y-auto">
                <form onSubmit={handleSubmit}>
                    <div className="p-6">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-gray-800">Add a New Recipe</h2>
                            <button type="button" onClick={onClose} className="text-gray-400 hover:text-gray-600">
                                <Icon path="M6 18L18 6M6 6l12 12" className="w-6 h-6" />
                            </button>
                        </div>
                         {formError && <div className="bg-red-100 text-red-700 p-3 rounded-md mb-4 text-sm">{formError}</div>}
                        <div className="space-y-4">
                            <InputField label="Recipe Title" value={title} onChange={(e) => setTitle(e.target.value)} required />
                            <InputField label="Prep Time (minutes)" type="number" value={prepTime} onChange={(e) => setPrepTime(e.target.value)} required />
                            <InputField label="Image URL (optional)" value={imageUrl} onChange={(e) => setImageUrl(e.target.value)} placeholder="https://example.com/image.jpg" />
                            <TextAreaField label="Ingredients (one per line)" value={ingredients} onChange={(e) => setIngredients(e.target.value)} required />
                            <TextAreaField label="Instructions (one per line)" value={instructions} onChange={(e) => setInstructions(e.target.value)} required />
                        </div>
                    </div>
                    <div className="bg-gray-100 px-6 py-4 flex justify-end space-x-3">
                        <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                        <button type="submit" className="px-4 py-2 bg-rose-500 text-white rounded-md hover:bg-rose-600 transition-colors">Add Recipe</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

// --- Component: RecipeDetailModal ---
const RecipeDetailModal = ({ recipe, onClose, onDelete }) => (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl shadow-2xl w-full max-w-3xl max-h-[90vh] flex flex-col">
            <div className="relative h-64 md:h-80 w-full">
                <img src={recipe.imageUrl || `https://placehold.co/800x400/f87171/ffffff?text=${recipe.title.split(' ').map(w=>w[0]).join('')}`} 
                     alt={recipe.title} 
                     className="w-full h-full object-cover rounded-t-2xl"
                     onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/800x400/fecaca/dc2626?text=Image+Error`; }}
                />
                <button onClick={onClose} className="absolute top-4 right-4 bg-black bg-opacity-50 text-white rounded-full p-2 hover:bg-opacity-75 transition-colors">
                    <Icon path="M6 18L18 6M6 6l12 12" className="w-6 h-6" />
                </button>
            </div>
            <div className="p-6 md:p-8 overflow-y-auto flex-1">
                <h2 className="text-3xl font-extrabold text-gray-900 mb-2">{recipe.title}</h2>
                <div className="flex items-center text-gray-500 mb-6">
                    <Icon path="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" className="w-5 h-5 mr-2" />
                    <span>{recipe.prepTime} minutes prep time</span>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                        <h3 className="text-xl font-bold text-gray-800 mb-3 border-b-2 border-rose-200 pb-2">Ingredients</h3>
                        <ul className="list-disc list-inside space-y-2 text-gray-700">
                            {recipe.ingredients.map((item, index) => <li key={index}>{item}</li>)}
                        </ul>
                    </div>
                    <div>
                        <h3 className="text-xl font-bold text-gray-800 mb-3 border-b-2 border-rose-200 pb-2">Instructions</h3>
                        <ol className="list-decimal list-inside space-y-2 text-gray-700">
                            {recipe.instructions.map((item, index) => <li key={index}>{item}</li>)}
                        </ol>
                    </div>
                </div>
            </div>
            <div className="bg-gray-50 px-6 py-4 flex justify-end rounded-b-2xl">
                <button onClick={() => onDelete(recipe.id)} className="flex items-center space-x-2 bg-red-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-red-600 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50">
                    <Icon path="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                    <span>Delete</span>
                </button>
            </div>
        </div>
    </div>
);

// --- Component: ConfirmModal ---
const ConfirmModal = ({ title, message, onConfirm, onCancel }) => (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg shadow-xl w-full max-w-sm">
            <div className="p-6">
                <h3 className="text-lg font-medium leading-6 text-gray-900">{title}</h3>
                <div className="mt-2">
                    <p className="text-sm text-gray-500">{message}</p>
                </div>
            </div>
            <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                    type="button"
                    onClick={onConfirm}
                    className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
                >
                    Delete
                </button>
                <button
                    type="button"
                    onClick={onCancel}
                    className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                >
                    Cancel
                </button>
            </div>
        </div>
    </div>
);


// --- Helper Components ---
const InputField = ({ label, ...props }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
        <input className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500" {...props} />
    </div>
);

const TextAreaField = ({ label, ...props }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
        <textarea rows="4" className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-rose-500 focus:border-rose-500" {...props}></textarea>
    </div>
);

const LoadingSpinner = () => (
    <div className="flex justify-center items-center p-10">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-rose-500"></div>
    </div>
);

const ErrorMessage = ({ message }) => (
    <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md my-4" role="alert">
        <p className="font-bold">Error</p>
        <p>{message}</p>
    </div>
);

const EmptyState = ({ onAdd }) => (
    <div className="text-center py-20 px-6 bg-white rounded-lg shadow-md">
        <Icon path="M3.375 19.5h17.25c.621 0 1.125-.504 1.125-1.125V9.75c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v8.625c0 .621.504 1.125 1.125 1.125Z" className="mx-auto h-16 w-16 text-gray-300" />
        <h3 className="mt-4 text-xl font-semibold text-gray-900">No recipes yet</h3>
        <p className="mt-2 text-gray-500">Get started by adding your first recipe!</p>
        <div className="mt-6">
            <button
                onClick={onAdd}
                className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-rose-500 hover:bg-rose-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500"
            >
                <Icon path="M12 4.5v15m7.5-7.5h-15" className="w-5 h-5 mr-2" />
                Add New Recipe
            </button>
        </div>
    </div>
);
